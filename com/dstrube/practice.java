/*
From ~/java:

javac -d bin com/dstrube/practice.java
java -cp bin com.dstrube.practice

*/
package com.dstrube;

//import java.util.Comparator;
import java.util.ArrayList;

public class practice{
	
	public static void main(String[] args){
		//final Comparator<String> ca = new SortByIntAscending();
		
		int[]a = null;
	}
	
	//static int[][] init2dArray(int[]a, int[]b){
	/*
		int[]a = {1,2};
		int[]b = {3,4};
		int[][]c = init2dArray(a,b);
		for (int i = 0; i < a.length; i++){
			//System.out.print("row " + i);
			for (int j = 0; j < b.length; j++){
				//System.out.println("col " + j);
				//System.out.println("c["+i+"]["+j+"] = " + c[i][j]);
			}
			System.out.println();
		}

	*/
	//https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html
	/*
		int[][]c = new int[a.length][b.length];
		for (int i = 0; i < a.length; i++){
			for (int j = 0; j < b.length; j++){
				if (j == 0){
					System.out.println("Setting c["+i+"]["+j+"] = " + a[i]);
					c[i][j] = a[i];
				}else{
					System.out.println("Setting c["+i+"]["+j+"] = " + b[i]);
					c[i][j] = b[i];
				}
			}
		}
		return c;
	}*/
	

	/*static final class SortByIntAscending implements Comparator<String> { 
    	public int compare(String a, String b) {
    		//https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html
    		Integer ai = Integer.parseUnsignedInt(a);
    		Integer bi = Integer.parseUnsignedInt(b);
	    	//to sort ascending:
	    	return ai.compareTo(bi);
	    } 
	} */

/* #1
Given an integer n and an array a of length n, your task is to apply the following mutation to a:

Array a mutates into a new array b of length n.
For each i from 0 to n - 1, b[i] = a[i - 1] + a[i] + a[i + 1].
If some element in the sum a[i - 1] + a[i] + a[i + 1] does not exist, it should be set to 0. For example, b[0] should be equal to 0 + a[0] + a[1].

int[] mutateTheArray(int n, int[] a) {
    if (n == 0 || n == 1){
        return a;
    }
    int[] b = new int[n];
    for (int i = 0; i < a.length; i++){
        if (i == 0){
            b[i] = a[i] + a[i+1];
        }else if (i == a.length - 1){
            b[i] = a[i-1] + a[i];
        }else{
            b[i] = a[i-1] + a[i] + a[i+1];
        }
        
    }
    return b;
}

*/

/* #2
You are given an array of integers a. A new array b is generated by rearranging the elements of a in the following way:

b[0] is equal to a[0];
b[1] is equal to the last element of a;
b[2] is equal to a[1];
b[3] is equal to the second-last element of a;
b[4] is equal to a[2];
b[5] is equal to the third-last element of a;
and so on.

static boolean alternatingSort(int[] a) {
    if (a.length == 0 || a.length == 1){
        return true;
    }
    int[] b = new int[a.length];
    b[0] = a[0];
    System.out.println("b[" + 0 + "] = " + b[0]);
    int k = a.length-1;
    int h = 1;
    for(int i = 1; i < a.length; i++){
        if(i % 2 == 1){
            b[i] = a[k];
            k--;
        }else{
            b[i] = a[h];
            h++;
        }
        
        System.out.println("b[" + i + "] = " + b[i]);
    }
    
    for (int i = 0; i < b.length-1; i++){
        if (b[i] < b[i+1]){
            continue;
        }else return false;
    }
    return true;
}

*/

/* #3
You are implementing your own programming language and you've decided to add support for merging strings. A typical merge function would take two strings s1 and s2, and return the lexicographically smallest result that can be obtained by placing the symbols of s2 between the symbols of s1 in such a way that maintains the relative order of the characters in each string.

For example, if s1 = "super" and s2 = "tower", the result should be merge(s1, s2) = "stouperwer".

You'd like to make your language more unique, so for your merge function, instead of comparing the characters in the usual lexicographical order, you'll compare them based on how many times they occur in their respective initial strings (fewer occurrences means the character is considered smaller). If the number of occurrences are equal, then the characters should be compared in the usual lexicographical way. If both number of occurences and characters are equal, you should take the characters from the first string to the result. Note that occurrences in the initial strings are compared - they do not change over the merge process.

Given two strings s1 and s2, return the result of the special merge function you are implementing.

Example

For s1 = "dce" and s2 = "cccbd", the output should be
mergeStrings(s1, s2) = "dcecccbd".
All symbols from s1 goes first, because all of them have only 1 occurrence in s1 and c has 3 occurrences in s2.


For s1 = "super" and s2 = "tower", the output should be
mergeStrings(s1, s2) = "stouperwer".
Because in both strings all symbols occur only 1 time, strings are merged as usual. You can find explanation for this example on the image in the description.

static String mergeStrings(String s1, String s2) {
    if (s1.length() == 0 || s2.length() == 0)
		return s1 + s2;
    ArrayList<MyO> list1 = new ArrayList<>();
    ArrayList<MyO> list2 = new ArrayList<>();
    
    for(int i = 0; i < s1.length(); i++){
        char c = s1.charAt(i);
        long count = s1.chars().filter(ch -> ch == c).count();
        MyO entry = new MyO(c, count);
        list1.add(entry);
    }
    for(int i = 0; i < s2.length(); i++){
        char c = s2.charAt(i);
        long count = s2.chars().filter(ch -> ch == c).count();
        MyO entry = new MyO(c, count);
        list2.add(entry);
    }
    StringBuilder sb = new StringBuilder();

    int j=0;
    for (int i=0; i < list1.size(); i++){
    	char c1 = list1.get(i).c;
    	long count1 = list1.get(i).count;
    	char c2 = list2.get(j).c;
    	long count2 = list2.get(j).count;
    	if(count1 < count2){
    		System.out.println("count1 < count2: " + count1 + " < " + count2);
	    	sb.append(c1);
	    }else if (count2 < count1){
	    	System.out.println("count1 > count2: " + count1 + " > " + count2);
	    	sb.append(c2);
			j++;
    	}else if (c1 < c2){
	    	System.out.println("c1 < c2: " + c1 + " < " + c2);
	    	sb.append(c1);
	    }else if (c2 < c1){
			System.out.println("c1 > c2: " + c1 + " > " + c2);
    		sb.append(c2);
	    	j++;
	    }else{
			System.out.println("Else: appending c1: " + c1);
	    	sb.append(c1);
    	}
    	if(i == list1.size()-1){
    		for(;j<list2.size();j++){
	    		c2 = list2.get(j).c;
    			sb.append(c2);
    		}
    	}
    }
	return sb.toString();
	}
	
	static final class MyO{
		public char c;
		public long count;
		public MyO(char c, long count){
			this.c = c;
			this.count = count;
		}
	}
*/

/* #4
Given an array of positive integers a, your task is to calculate the sum of every possible a[i] ∘ a[j], where a[i] ∘ a[j] is the concatenation of the string representations of a[i] and a[j] respectively.

static long concatenationsSum(int[] a) {
	ArrayList<String> list = new ArrayList<>();
    for (int i = 0; i < a.length; i++){
        for(int j = 0; j < a.length; j++){
        	String s = ""+a[i]+a[j];
        	list.add(s);
		    System.out.println(s);
        }
    }
    long sum = 0L;
    for(String s : list){
    	int x = Integer.parseUnsignedInt(s);
    	sum += x;
    }
    return sum;
}

*/

/*
long digitAnagrams(int[] a) {
    long pairs = 0;
    for (int i = 0; i < a.length; i++){
        for (int j = 0; j < a.length; j++){
            if(i == j){
                continue;
            }
            String ai = ""+a[i];
            String aj = ""+a[j];
            if(ai.length() != aj.length()){
                continue;
            }
            boolean iHasAllOfJ = true;
            for(char c : ai.toCharArray()){
                long count1 = aj.chars().filter(ch -> ch == c).count();
                long count2 = ai.chars().filter(ch -> ch == c).count();
                if (count1 != count2){
                    iHasAllOfJ = false;
                    break;
                }
            }
            
            if(iHasAllOfJ){//} && jHasAllOfI){
                //System.out.println("Comparing " + ai + " to " + aj + " = match?");
                pairs++;
            }
        }
    }
    return pairs/2;
}

*/

/*
int[][] meanGroups(int[][] a) {
    ArrayList<Float> means = new ArrayList<>();
    ArrayList<Integer>indices = new ArrayList<>();
    int i = 0;
    for(int[]innerA : a){
        float mean = mean(innerA);
        means.add(mean);
        indices.add(i);
        System.out.println("Arrays with index " + i + " have mean of " + mean);
        i++;
    }
    ArrayList<Integer>output1 = new ArrayList<>();
    ArrayList<Integer>output2 = new ArrayList<>();
    i = 0;
    for(float mean: means){
        if(output1.contains((int) mean)){
            int j = output1.indexOf((int)mean);
            output2.set(j, output2.get(i) + 1);
            System.out.println();
        }else{
            output1.add(i, (int)mean);
            output2.add(i, 1);
            i++;
        }
    }
    int[][] result = new int[output1.size()][output2.size()];
    for(int c = 0; c < output1.size(); c++){
        result[c] = new int[output2.size()];
        for (int b = 0; b < output2.size(); b++){
            result[c][b] = output2.get(b);
        }
    }
    
    return result;
}

float mean(int[] a){
    float result = 0;
    int sum = 0;
    for(int i = 0; i < a.length; i++){
        sum+=a[i];
    }
    result = sum / a.length;
    return result;
}

*/

}